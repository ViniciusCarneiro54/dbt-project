/*DDL: CREATE , ALTER, DROP, TRUNCATE, USE*/

--1: CRIAR UMA DATABASE
CREATE DATABASE TREINAMENTO_SQL

--2: MUDAR CONTEXTO DA QUERY
USE TREINAMENTO_SQL

--3: CRIAR UM SCHEMA
--CREATE SCHEMA TREINAMENTO

--4: CRIAR UMA TABELA
CREATE TABLE TREINAMENTO.TABELA_01
(
COLUNA_INTEIRO INT,
COLUNA_TEXTO VARCHAR(20),
COLUNA_MONETARIO SMALLMONEY,
COLUNA_NUMERICA NUMERIC(5,3)
)

--5: ADICIONAR UMA COLUNA A UMA TABELA JÁ EXISTENTE - 1 COLUNA POR VEZ
ALTER TABLE TREINAMENTO.TABELA_01
ADD COLUNA_DATA1 DATE

--5: ADICIONAR UMA COLUNA A UMA TABELA JÁ EXISTENTE - MAIS DE UMA COLUNA POR VEZ
ALTER TABLE TREINAMENTO.TABELA_01
ADD COLUNA_DATA2 DATE, COLUNA_HORA TIME

--6: ALTERAR O TIPO DE DADOS DE UMA COLUNA EXISTENTE
ALTER TABLE TREINAMENTO.TABELA_01
ALTER COLUMN COLUNA_INTEIRO BIGINT

-- View padrão do sistema para visualiar metadados da tabela
SELECT *
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'TABELA_01';

--7: DROPAR(DELETAR) UMA COLUNA JÁ EXISTENTE NA TABELA
ALTER TABLE TREINAMENTO.TABELA_01
DROP COLUMN COLUNA_DATA1

--8: APAGAR/DELETAR UMA TABELA. OBS SE TIVER REFERENCIA DE CHAVE ESTRANGEIRA, 
--VC NÃO CONSEGUE APAGAR A TABELA
DROP TABLE TREINAMENTO.TABELA_01

--9: TRUNCATE TABLE (APAGAR OS DADOS EXISTENTES)
TRUNCATE TABLE TREINAMENTO.TABELA_01





/*** DML: INSERT, UPDATE, DELETE, MERGE ***/

--1: CRIAR UMA TABELA
CREATE TABLE TREINAMENTO.TABELA_01
(
COLUNA_INTEIRO INT,
COLUNA_TEXTO VARCHAR(20),
COLUNA_MONETARIO SMALLMONEY,
COLUNA_NUMERICA NUMERIC (5,3),
COLUNA_DATA DATE
)

select * from TREINAMENTO.TABELA_01

--2: INSERT SEM DEFINIR AS COLUNAS - NÃO É MUITO RECOMENDADA!!
INSERT INTO TREINAMENTO.TABELA_01
VALUES (3,'TEXTO C', 44.4, 55.5, '2021-07-03' )

select * from TREINAMENTO.TABELA_01

--3: Insert definidindo as colunas em ordem aleatorio - Lembrar que os valores devem respeitar a ordem das colunas.
INSERT INTO TREINAMENTO.TABELA_01 (COLUNA_DATA, COLUNA_TEXTO, COLUNA_INTEIRO, COLUNA_MONETARIO,COLUNA_NUMERICA )
VALUES ('2021-07-03', 'TEXTO D', 10, 77.8, 98.7)

select * from TREINAMENTO.TABELA_01

--4: INSERT DEFININDO APENAS ALGUMAS COLUNAS
INSERT INTO TREINAMENTO.TABELA_01 (COLUNA_TEXTO, COLUNA_DATA)
VALUES ('TEXTO E', '2021-07-03')

select * from TREINAMENTO.TABELA_01

--5: INSERT COM VARIOS VALORES - PODE-SE INSERIR LINHAS COM UM UNICO COMANDO INSERT
INSERT INTO TREINAMENTO.TABELA_01 (COLUNA_TEXTO, COLUNA_DATA)
VALUES ('TEXTO F', '2021-07-03'), 
	   ('TEXTO G', '2021-07-04'),
	   ('TEXTO H', '2021-07-05'),
	   ('TEXTO I', '2021-07-06')

select * from TREINAMENTO.TABELA_01 where COLUNA_TEXTO = 'Texto E'

-- 6: ATUALIZAR UMA COLUNA ESPECIFICA COM FILTRO. BOA PRATICA: QUANTO MAIS FILTRO MELHOR
UPDATE TREINAMENTO.TABELA_01
SET COLUNA_INTEIRO = 54
where COLUNA_TEXTO in ('Texto E','Texto F')
and COLUNA_DATA = '2021-07-03'

select * from TREINAMENTO.TABELA_01

-- 7: ATUALIZAR MAIS DE UMA COLUNA COM FILTRO. BOA PRATICA: QUANTO MAIS FILTRO MELHOR
UPDATE TREINAMENTO.TABELA_01
SET COLUNA_INTEIRO = 5,
	COLUNA_MONETARIO = 10.55,
	COLUNA_NUMERICA = 4.99
WHERE COLUNA_TEXTO = 'TEXTO G'  

select * from TREINAMENTO.TABELA_01

-- 8:DELETAR UM REGISTRO COM FILTRO. BOA PRATICA: QUANTO MAIS FILTRO MELHOR. 
-- SE O REGISTRO NA TABELA A, ESTIVER SENDO REFERENCIADO NA TABELA B, NÃO SERÁ POSSÍVEL A EXCLUSÃO

DELETE FROM TREINAMENTO.TABELA_01
WHERE COLUNA_TEXTO = 'TEXTO E'
and COLUNA_INTEIRO = 54
and COLUNA_DATA = '2021-07-03'

select * from TREINAMENTO.TABELA_01




--9: MERGE
-- CRIANDO TABELA DE ORIGEM
create table TREINAMENTO.origem_prd (
id char(4),
nome varchar(20),
preco smallmoney
)

--CRIANDO TABELA DE DESTINO
create table TREINAMENTO.destino_prd (
id char(4),
nome varchar(20),
preco smallmoney
)

--INSERINDO DADOS NA ORIGEM
insert into TREINAMENTO.origem_prd (id,nome,preco)
values ('P001', 'PRODUTO 1', 55.55),
	   ('P002', 'PRODUTO 2', 750.75),
	   ('P003', 'PRODUTO 3', 200.00)

select * from TREINAMENTO.origem_prd
select * from TREINAMENTO.destino_prd

-- CRIANDO MERGE -upsert: insert + update

MERGE
	TREINAMENTO.destino_prd AS DEST -- TABELA DE DESTINO
USING
	TREINAMENTO.origem_prd AS ORIG -- TABELA DE ORIGEM UTILIZADA PARA INSERIR OU ATUALIZAR OS DADOS DO DESTINO
ON (DEST.ID = ORIG.ID) -- FILTRO PARA REALIZAR O PROCEDIMENTO NO MERGE

WHEN NOT MATCHED BY TARGET -- QUANDO EXISTIR NA ORIGEM E NÃO EXISTIR NO DESTINO
THEN
	INSERT (ID, NOME, PRECO) -- CAMPOS DA TABELA DE DESTINO
	VALUES (ORIG.ID, ORIG.NOME, ORIG.PRECO) -- CAMPOS DA TABELA DE ORIGEM

WHEN MATCHED -- QUANDO EXISTIR REGISTROS IGUAIS NA ORIGEM E NO DESTINO
-- COLOCAR DEPOIS == AND (ORIG.NOME <> DEST.NOME OR ORIG.PRECO <> DEST.PRECO) ==
THEN
	UPDATE -- UPDATE NA TABELA DE DESTINO
	SET DEST.NOME = ORIG.NOME, -- ATUALIZA OS DADOS DO DESTINO, ALTERANDO COM OS DADOS QUE VEM DA ORIGEM
		DEST.PRECO = ORIG.PRECO -- ATUALIZA OS DADOS DO DESTINO, ALTERANDO COM OS DADOS QUE VEM DA ORIGEM

WHEN NOT MATCHED BY SOURCE -- QUANDO NÃO EXISTE NA ORIGEM E EXISTE NO DESTINO, ELE APAGA O REGISTRO NÃO ENCONTRADO DO DESTINO 
THEN
	DELETE
;

-- ANALISE DO MERGE
SELECT * FROM TREINAMENTO.origem_prd
SELECT * FROM TREINAMENTO.destino_prd

-- UPDATE NO VALOR DO PRODUTO NA ORIGEM
update TREINAMENTO.origem_prd
set preco = 198.90
where id = 'P001'


-- ANALISE DO MERGE
SELECT * FROM TREINAMENTO.origem_prd
SELECT * FROM TREINAMENTO.destino_prd


-- DELETAR UMA LINHA NA TABELA DE ORIGEM
delete 
from TREINAMENTO.origem_prd
where id = 'P002'

-- ANALISE DO MERGE
SELECT * FROM TREINAMENTO.origem_prd
SELECT * FROM TREINAMENTO.destino_prd



/* PADRÕES DE NOMENCLATURA COLUNA/TABELA

TUDO MAISCULO - CLIENTE - NOME
tudo minusculo - cliente - nome
NomeComposto - TbCliente - NomeCompleto
nomeComposto - nomeCliente - nomeCompleto
com separador - tb_Cliente - nome_cliente
nome coluna com tipo - str_nome_animal, dt_dtnasc_animal, int_qtdItens, num_valorConsulta

Não colocar acentos e nem espaços em nome de tabela e coluna

TbAnimal
	animal_nomeCompleto, animal_dtNasc, animal_codRaca
	animal_dt_Nasc
TbDono
	dono_dt_Nasc
TbRaca
TbAtendente
TbConsulta


SELECT coluna 
FROM tabela
WHERE filtro = 100
*/


/*DTL: BEGIN TRAN, COMMIT, ROLLBACK*/

--1: BEGIN TRAN COM COMANDO UPDATE
BEGIN TRAN
UPDATE TREINAMENTO.TABELA_01
SET COLUNA_TEXTO = 'TEXTO S'


COMMIT -- SALVA A TRANSAÇÃO NO BANCO = CTRL+S
ROLLBACK -- DESFAZ A TRANSAÇÃO = CTRL+Z


SELECT * FROM TREINAMENTO.TABELA_01


--2: BEGIN TRAN COM COMANDO DROP TABLE
BEGIN TRAN APAGANDOTABELA
DROP TABLE TREINAMENTO.TABELA_01

COMMIT  -- SALVA A TRANSAÇÃO NO BANCO = CTRL+S
ROLLBACK -- DESFAZ A TRANSAÇÃO = CTRL+Z

SELECT * FROM TREINAMENTO.TABELA_01;

--3: BEGIN TRAN COM O COMANDO DELETE
BEGIN TRANSACTION
DELETE FROM TREINAMENTO.TABELA_01
WHERE COLUNA_TEXTO = 'TEXTO I'

COMMIT -- SALVA A TRANSAÇÃO NO BANCO = CTRL+S
ROLLBACK -- DESFAZ A TRANSAÇÃO = CTRL+Z

SELECT * FROM TREINAMENTO.TABELA_01


/* DQL: SELECT */

--1: SELECT COM O ASTERISCO - RETORNA TODAS AS COLUNAS DA TABELA. OBS: NÃO É BOA PRÁTICA
SELECT * FROM TREINAMENTO.TABELA_01

--2: SELECT DEFININDO AS COLUNAS. OBS: É UMA ÓTIMA PRÁTICA
SELECT
	COLUNA_TEXTO
	,COLUNA_INTEIRO
	,COLUNA_MONETARIO
	,COLUNA_NUMERICA
	,COLUNA_DATA
FROM TREINAMENTO.TABELA_01


--3: SELECT DEFININDO AS COLUNAS. RETORNANDO APENAS AS COLUNAS DESEJADAS. OBS: É UMA ÓTIMA PRÁTICA
SELECT
	COLUNA_TEXTO
	,COLUNA_INTEIRO
FROM TREINAMENTO.TABELA_01

--4: SELECT DEFININDO AS COLUNAS E FILTRANDO OS DADOS. OBS: É UMA ÓTIMA PRÁTICA
SELECT
	COLUNA_TEXTO
	,COLUNA_INTEIRO
FROM TREINAMENTO.TABELA_01
WHERE COLUNA_INTEIRO IS NOT NULL



/*** DCL: GRANT,  DENY***/
--VFC Dar permissões e tirar de usuario 
--VFC Mostrar pasta de security
--VFC USUARIO SERVIDOR E DO BANCO DE DADOS (USUARIO DO BANCO É QUEM VAI ACESSAR ESPECIFICAMENTE UM BANCO)

--1: CRIANDO UM USUARIO NO BANCO DE DADOS SEM LOGIN
CREATE USER USER_DCL WITHOUT LOGIN;
-- MOSTRAR O USUARIO CRIADO NA PASTA (SECURITY)

--2: DAR PERMISSÃO PARA O USUARIO REALIZAR SELECT E INSERT NA TABELA_01
GRANT SELECT, INSERT ON TREINAMENTO.TABELA_01 TO USER_DCL;
-- MOSTRAR AS PERMISOES NAS PROPRIEDAS DO USUARIO

--2.1: DAR PERMISSÃO PARA O USUARIO REALIZAR TODOS OS COMANDOS DML, DDL
GRANT ALL ON TREINAMENTO.TABELA_01 TO USER_DCL;
--VFC LER AS MENSAGENS INDEPENDENTE DO SGBD
--VFC OBSOLETA E MANTIDA APENAS POR COMPATIBILIDADE

--3: NEGAR UMA PERMISSÃO 
--1* INSERT 
DENY INSERT ON TREINAMENTO.TABELA_01 TO USER_DCL;
DENY SELECT ON TREINAMENTO.TABELA_01 TO USER_DCL;

--4: EXECUTAR UMA QUERY INSERT COMO SE FOSSE O USUÁRIO USER_DCL,
--VFC -- PARA TESTAR NA TEORIA TERIA QUE LOGAR COM USUARIO, CRIAR USUARIO DE SERVIDOR E O COMANDO ABAIXO SIMULA
EXECUTE AS USER = 'USER_DCL'
INSERT INTO TREINAMENTO.TABELA_01
VALUES (16,'TEXTO K', 98.4, 67.5, '2021-07-04' )
REVERT; -- APÓS A EXECUÇÃO O COMANDO REVERT, RETORNA A JANELA DE QUERY ATUAL AO USUÁRIO DE ORIGEM

--5: EXECUTAR UMA QUERY SELECT COMO SE FOSSE O USUÁRIO USER_DCL, 
EXECUTE AS USER = 'USER_DCL'
SELECT * FROM TREINAMENTO.TABELA_01
REVERT; -- APÓS A EXECUÇÃO O COMANDO REVERT, RETORNA A JANELA DE QUERY ATUAL AO USUÁRIO DE ORIGEM

-- 6: REMOVER PERMISSÕES COM REVOK
--VFC PARA PERMISSOES CONCEDIDAS ANTERIORMENTE
REVOKE SELECT ON TREINAMENTO.TABELA_01 TO USER_DCL;